{
  "openapi": "3.0.1",
  "info": {
    "title": "task11_api",
    "description": "this is description",
    "version": "2024-05-06T21:54:04Z"
  },
  "servers": [
    {
      "url": "https://0ni7nm85g4.execute-api.eu-central-1.amazonaws.com/{basePath}",
      "variables": {
        "basePath": {
          "default": "api"
        }
      }
    }
  ],
  "paths": {
    "/reservations": {
      "get": {
        "summary": "Retrieve all reservations",
        "description": "Retrieve all reservations",
        "responses": {
          "200": {
            "description": "A list of reservations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationList"
                }
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:196241772369:function:api_handler/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_templates",
          "type": "aws_proxy"
        }
      },
      "post": {
        "description": "Add a new reservations to the store",
        "summary": "Creates a new reservation",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Reservation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponse"
                }
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:196241772369:function:api_handler/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_templates",
          "type": "aws_proxy"
        }
      }
    },
    "/tables": {
      "get": {
        "summary": "Retrieve all tables",
        "description": "Retrieve all tables",
        "responses": {
          "200": {
            "description": "The request has succeeded. The server has processed the request and has returned a list of tables as specified in the response body. Each table includes details such as its ID, number, capacity, whether it's in the VIP hall, and optionally, the minimum order required to book it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableList"
                }
              }
            }
          },
          "400": {
            "description": "There was an error in the request."
          }
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:196241772369:function:api_handler/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_templates",
          "type": "aws_proxy"
        }
      },
      "post": {
        "summary": "Create a new table",
        "description": "Create a new table",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Table"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request has succeeded. The server has successfully created a new table based on the information provided in the request body. The response contains the ID of the newly created table.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableResponse"
                }
              }
            }
          },
          "400": {
            "description": "There was an error in the request."
          }
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:196241772369:function:api_handler/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_templates",
          "type": "aws_proxy"
        }
      }
    },
    "/signin": {
      "post": {
        "summary": "Sign-in to the system",
        "description": "Sign-in to the system",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request has succeeded. The server has processed the sign-in request, and the provided credentials (email and password) were valid. The response contains an $access token, which will be used for subsequent authenticated requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignInResponse"
                }
              }
            }
          },
          "400": {
            "description": "There was an error in the request."
          }
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:196241772369:function:api_handler/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_templates",
          "type": "aws_proxy"
        }
      }
    },
    "/signup": {
      "post": {
        "summary": "Sign-up for the system",
        "description": "Sign-up for the system",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUp"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sign-up process is successful."
          },
          "400": {
            "description": "There was an error in the request."
          }
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:196241772369:function:api_handler/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_templates",
          "type": "aws_proxy"
        }
      }
    },
    "/tables/{tableId}": {
      "get": {
        "summary": "Retrieve information of a specific table",
        "description": "Retrieve information of a specific table",
        "parameters": [
          {
            "in": "path",
            "name": "tableId",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "ID of the table to be retrieved"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded. The server has processed the request and has returned information about the table specified by tableId. The response body contains details such as the table's ID, number, capacity, whether it's in the VIP hall, and optionally, the minimum order required to book it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Table"
                }
              }
            }
          },
          "400": {
            "description": "There was an error in the request."
          }
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:196241772369:function:api_handler/invocations",
          "responses": {
            "default": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "when_no_templates",
          "type": "aws_proxy"
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Reservation": {
        "type": "object",
        "properties": {
          "tableNumber": {
            "type": "integer",
            "format": "int32",
            "description": "Number of the table"
          },
          "clientName": {
            "type": "string",
            "description": "Client's name"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Client's phone number"
          },
          "date": {
            "type": "string",
            "description": "Date in yyyy-MM-dd format"
          },
          "slotTimeStart": {
            "type": "string",
            "description": "Time slot start time in HH:MM format, like \"13:00\""
          },
          "slotTimeEnd": {
            "type": "string",
            "description": "Time slot end time in HH:MM format, like \"15:00\""
          }
        }
      },
      "ReservationList": {
        "type": "object",
        "properties": {
          "reservations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reservation"
            }
          }
        }
      },
      "ReservationResponse": {
        "type": "object",
        "properties": {
          "reservationId": {
            "type": "string",
            "description": "UUIDv4 ID of the Reservation"
          }
        }
      },
      "Table": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the table"
          },
          "number": {
            "type": "integer",
            "description": "Number of the table"
          },
          "places": {
            "type": "integer",
            "description": "Amount of people to sit at the table"
          },
          "isVip": {
            "type": "boolean",
            "description": "Is the table in the VIP hall"
          },
          "minOrder": {
            "type": "integer",
            "description": "Table deposit required to book it",
            "nullable": true
          }
        }
      },
      "TableList": {
        "type": "object",
        "properties": {
          "tables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Table"
            }
          }
        }
      },
      "TableResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the newly created table"
          }
        }
      },
      "SignIn": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email of the user"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Password of the user"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "SignInResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Access token for the session"
          }
        }
      },
      "SignUp": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First name of the user"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the user"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email of the user"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Password of the user"
          }
        }
      }
    },
    "securitySchemes": {
      "authorizer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "x-amazon-apigateway-authtype": "cognito_user_pools",
        "x-amazon-apigateway-authorizer": {
          "x-syndicate-cognito-userpool-names": ["simple-booking-userpool"],
          "type": "cognito_user_pools"
        }
      }
    }
  }
}